(async () => {
  const password = prompt("Enter host password:");
  if (password !== 'mosesischill') {
    return alert("‚ùå Incorrect password.");
  }

  const loadingDiv = document.createElement("div");
  loadingDiv.style.cssText = `
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 20px;
    color: #ffffff;
    font-family: 'Arial', sans-serif;
    z-index: 99999;
    opacity: 0.8;
  `;
  loadingDiv.innerHTML = "Loading Firebase...";
  document.body.appendChild(loadingDiv);

  // Load Firebase if not already loaded
  if (!window.firebase) {
    const firebaseAppScript = document.createElement("script");
    firebaseAppScript.src = "https://www.gstatic.com/firebasejs/9.22.2/firebase-app-compat.js";
    document.head.appendChild(firebaseAppScript);
    await new Promise(resolve => firebaseAppScript.onload = resolve);

    const firebaseDatabaseScript = document.createElement("script");
    firebaseDatabaseScript.src = "https://www.gstatic.com/firebasejs/9.22.2/firebase-database-compat.js";
    document.head.appendChild(firebaseDatabaseScript);
    await new Promise(resolve => firebaseDatabaseScript.onload = resolve);
  }

  const firebaseConfig = {
    apiKey: 'AIzaSyD5hBBFtSWYOMIk1ZeLqcUKsAubdok4FWk',
    authDomain: "nebcasino-5aca1.firebaseapp.com",
    databaseURL: "https://nebcasino-5aca1-default-rtdb.firebaseio.com",
    projectId: "nebcasino-5aca1",
    storageBucket: "nebcasino-5aca1.appspot.com",
    messagingSenderId: "907673467348",
    appId: '1:907673467348:web:37b0bcbad757f95845fe41'
  };

  firebase.initializeApp(firebaseConfig);
  const database = firebase.database();
  const devicesRef = database.ref("sessions/public/devices");
  const keysRef = database.ref("sessions/public/keys");

  // Main Host Panel Styles
  const hostPanel = document.createElement("div");
  hostPanel.style.cssText = `
    position: fixed;
    top: 10%;
    left: 5%;
    right: 5%;
    padding: 20px;
    background: #222;
    color: white;
    font-family: 'Arial', sans-serif;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.4);
    z-index: 99999;
    max-height: 80vh;
    overflow: auto;
    opacity: 0;
    transform: translateY(-50px);
    transition: opacity 0.5s, transform 0.5s;
    width: 90%;
  `;
  hostPanel.innerHTML = "<h2 style='text-align: center;'>üåå Host Panel</h2>";
  document.body.appendChild(hostPanel);

  // Key Management Section
  const keyManagementSection = document.createElement("section");
  keyManagementSection.style.cssText = `
    margin-top: 20px;
    padding: 20px;
    background-color: #333;
    border-radius: 10px;
  `;
  keyManagementSection.innerHTML = "<h3>üîë Key Management</h3>";
  hostPanel.appendChild(keyManagementSection);

  const keyInput = document.createElement("input");
  keyInput.placeholder = "Enter new key (e.g. ABC123)";
  keyInput.style.cssText = `
    width: calc(100% - 120px);
    padding: 8px;
    border-radius: 5px;
    margin-right: 10px;
    margin-bottom: 10px;
  `;

  const usesInput = document.createElement("input");
  usesInput.type = "number";
  usesInput.placeholder = "Uses";
  usesInput.style.cssText = `
    width: 100px;
    padding: 8px;
    border-radius: 5px;
    margin-right: 10px;
    margin-bottom: 10px;
  `;

  const levelSelect = document.createElement("select");
  levelSelect.style.cssText = `
    width: 150px;
    padding: 8px;
    border-radius: 5px;
    margin-right: 10px;
    margin-bottom: 10px;
  `;
  ["Lite", 'Normal', 'Normal+', "Elite", "Elite+", "Elite++"].forEach(level => {
    const option = document.createElement("option");
    option.value = level;
    option.textContent = level;
    levelSelect.appendChild(option);
  });

  const createKeyButton = document.createElement("button");
  createKeyButton.textContent = "‚ûï Create Key";
  createKeyButton.style.cssText = `
    padding: 10px 20px;
    border-radius: 5px;
    background-color: #4CAF50;
    color: white;
    font-size: 14px;
    border: none;
    cursor: pointer;
    margin-bottom: 10px;
  `;
  createKeyButton.onclick = () => {
    const key = keyInput.value.trim();
    const uses = parseInt(usesInput.value);
    const level = levelSelect.value;

    if (!key || isNaN(uses) || uses <= 0) {
      return alert("‚ùå Invalid key or uses.");
    }

    keysRef.child(key).set({
      usesLeft: uses,
      level: level,
      created: Date.now()
    }).then(() => {
      alert(`‚úÖ Key "${key}" created!`);
      keyInput.value = '';
      usesInput.value = '';
      updateKeyList();
    });
  };

  keyManagementSection.appendChild(keyInput);
  keyManagementSection.appendChild(usesInput);
  keyManagementSection.appendChild(levelSelect);
  keyManagementSection.appendChild(createKeyButton);

  const keyListDiv = document.createElement("div");
  keyListDiv.style.marginTop = "20px";
  keyManagementSection.appendChild(keyListDiv);

  // Update Key List
  function updateKeyList() {
    keysRef.on('value', snapshot => {
      const keys = snapshot.val() || {};
      keyListDiv.innerHTML = '';
      Object.entries(keys).forEach(([key, data]) => {
        const keyElement = document.createElement("div");
        keyElement.style.cssText = `
          border: 1px solid gray;
          padding: 10px;
          margin: 10px 0;
          background: #444;
          border-radius: 5px;
        `;
        keyElement.innerHTML = `
          <strong>${key}</strong> - ${data.usesLeft} uses left - Level: <b>${data.level}</b>
          <br><small>Created: ${new Date(data.created).toLocaleString()}</small>
        `;

        const deleteButton = document.createElement("button");
        deleteButton.textContent = "‚ùå Delete";
        deleteButton.style.cssText = `
          margin-left: 10px;
          background-color: #e74c3c;
          color: white;
          padding: 5px 10px;
          border-radius: 5px;
          cursor: pointer;
        `;
        deleteButton.onclick = () => {
          if (confirm(`Delete key "${key}"?`)) {
            keysRef.child(key).remove();
          }
        };

        keyElement.appendChild(deleteButton);
        keyListDiv.appendChild(keyElement);
      });
    });
  }

  // Device Management Section
  const deviceManagementSection = document.createElement("section");
  deviceManagementSection.style.cssText = `
    margin-top: 40px;
    padding: 20px;
    background-color: #333;
    border-radius: 10px;
  `;
  deviceManagementSection.innerHTML = "<h3>üñ•Ô∏è Device Management</h3>";
  hostPanel.appendChild(deviceManagementSection);

  // Refresh Devices
  const refreshDevices = () => {
    devicesRef.once("value", snapshot => {
      deviceManagementSection.querySelectorAll(".device").forEach(device => device.remove());
      const devices = snapshot.val() || {};

      Object.entries(devices).forEach(([deviceId, deviceData]) => {
        const deviceElement = document.createElement('div');
        deviceElement.className = "device";
        deviceElement.style.cssText = `
          border: 1px solid white;
          padding: 10px;
          margin: 10px 0;
          background: #444;
          border-radius: 5px;
        `;

        const deviceNameInput = document.createElement('input');
        deviceNameInput.value = deviceData.name || `Unnamed (${deviceId})`;
        deviceNameInput.style.cssText = `
          width: calc(100% - 20px);
          padding: 5px;
          border-radius: 5px;
          background: #333;
          color: white;
          border: 1px solid #555;
        `;
        deviceElement.appendChild(deviceNameInput);

        // Device Status Check: lastSeen timestamp
        const currentTime = Date.now();
        const isOnline = currentTime - deviceData.lastSeen < 5 * 60 * 1000; // 5 minutes

        const statusSpan = document.createElement('span');
        statusSpan.textContent = `Status: ${isOnline ? "üü¢ Online" : "üî¥ Offline"}`;
        statusSpan.style.color = isOnline ? 'green' : 'red';
        deviceElement.appendChild(statusSpan);

        const removeDeviceButton = document.createElement('button');
        removeDeviceButton.textContent = "‚ùå Remove Device";
        removeDeviceButton.style.cssText = `
          margin-left: 10px;
          background-color: #e74c3c;
          color: white;
          padding: 5px 10px;
          border-radius: 5px;
          cursor: pointer;
        `;
        removeDeviceButton.onclick = () => {
          if (confirm(`Remove device "${deviceData.name}"?`)) {
            devicesRef.child(deviceId).remove();
          }
        };

        deviceElement.appendChild(removeDeviceButton);
        deviceManagementSection.appendChild(deviceElement);
      });
    });
  };

  refreshDevices();
  setInterval(refreshDevices, 30000);

  // Reveal Host Panel with animation
  setTimeout(() => {
    hostPanel.style.opacity = 1;
    hostPanel.style.transform = 'translateY(0)';
  }, 500);
})();
